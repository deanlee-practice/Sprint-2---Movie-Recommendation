{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 표준 라이브러리 불러오기\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import missingno as msno\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "# 경고무시\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#영화 데이터 읽기\n",
    "\n",
    "# data_2006_2007 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2006~2007.xlsx', skiprows=[0,1,2,3,5])\n",
    "# data_2008_2009 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2008~2009.xlsx', skiprows=[0,1,2,3,5])\n",
    "# data_2010_2011 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2010~2011.xlsx', skiprows=[0,1,2,3,5])\n",
    "# data_2012_2013 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2012~2013.xlsx', skiprows=[0,1,2,3,5])\n",
    "# data_2014_2015 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2014~2015.xlsx', skiprows=[0,1,2,3,5])\n",
    "# data_2016_2017 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2016~2017.xlsx', skiprows=[0,1,2,3,5])\n",
    "# data_2018_2019 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2018~2019.xlsx', skiprows=[0,1,2,3,5])\n",
    "# data_2020_2021 = pd.read_excel('C:/Users/lodos/Desktop/데이터분석/2020~2021.xlsx', skiprows=[0,1,2,3,5])\n",
    "\n",
    "data_2006_2007 = pd.read_excel('D:/python3/source/데이터분석 data/2006~2007.xlsx', skiprows=[0,1,2,3,5])\n",
    "data_2008_2009 = pd.read_excel('D:/python3/source/데이터분석 data/2008~2009.xlsx', skiprows=[0,1,2,3,5])\n",
    "data_2010_2011 = pd.read_excel('D:/python3/source/데이터분석 data/2010~2011.xlsx', skiprows=[0,1,2,3,5])\n",
    "data_2012_2013 = pd.read_excel('D:/python3/source/데이터분석 data/2012~2013.xlsx', skiprows=[0,1,2,3,5])\n",
    "data_2014_2015 = pd.read_excel('D:/python3/source/데이터분석 data/2014~2015.xlsx', skiprows=[0,1,2,3,5])\n",
    "data_2016_2017 = pd.read_excel('D:/python3/source/데이터분석 data/2016~2017.xlsx', skiprows=[0,1,2,3,5])\n",
    "data_2018_2019 = pd.read_excel('D:/python3/source/데이터분석 data/2018~2019.xlsx', skiprows=[0,1,2,3,5])\n",
    "data_2020_2021 = pd.read_excel('D:/python3/source/데이터분석 data/2020~2021.xlsx', skiprows=[0,1,2,3,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 각 각의 영화 데이터 리스트에 담기\n",
    "\n",
    "data = [data_2006_2007, data_2008_2009, data_2010_2011, data_2012_2013, data_2014_2015, data_2016_2017,\n",
    "       data_2018_2019, data_2020_2021]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['순위', '영화명', '개봉일', '매출액 ', '매출액', '누적매출액 ', '관객수 ', '누적관객수 ', '스크린수 ',\n",
       "       '상영횟수 ', '대표국적 ', '국적 ', '제작사 ', '배급사 ', '등급 ', '장르 ', '감독 ', '배우 '],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# column 확인\n",
    "\n",
    "data_2006_2007.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# column 변경 (공백 제거)\n",
    "\n",
    "for data_ in  data : \n",
    "    \n",
    "    data_.columns = ['순위', '영화명', '개봉일', '매출액', '매출액점유율', '누적매출액', '관객수', '누적관객수', '스크린수',\n",
    "       '상영횟수', '대표국적', '국적', '제작사', '배급사', '등급', '장르', '감독', '배우']\n",
    "    \n",
    "    \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 각 각의 데이터 하나의 변수로 합치기\n",
    "\n",
    "a = 0\n",
    "\n",
    "for data_ in data[1:]  :\n",
    "    \n",
    "    if  a == 0 :\n",
    "    \n",
    "        data_2006_2021 = pd.merge(data_2006_2007, data_, how = 'outer')\n",
    "        \n",
    "        a = 1\n",
    "    \n",
    "    else :\n",
    "        \n",
    "        data_2006_2021 = pd.merge(data_2006_2021, data_, how  = 'outer')\n",
    "    \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 38415 entries, 0 to 38414\n",
      "Data columns (total 18 columns):\n",
      "순위        38415 non-null object\n",
      "영화명       38402 non-null object\n",
      "개봉일       22778 non-null datetime64[ns]\n",
      "매출액       38415 non-null int64\n",
      "매출액점유율    38407 non-null float64\n",
      "누적매출액     38415 non-null int64\n",
      "관객수       38415 non-null int64\n",
      "누적관객수     38415 non-null int64\n",
      "스크린수      38415 non-null int64\n",
      "상영횟수      38415 non-null int64\n",
      "대표국적      37761 non-null object\n",
      "국적        37740 non-null object\n",
      "제작사       9627 non-null object\n",
      "배급사       20518 non-null object\n",
      "등급        24195 non-null object\n",
      "장르        36767 non-null object\n",
      "감독        31248 non-null object\n",
      "배우        23060 non-null object\n",
      "dtypes: datetime64[ns](1), float64(1), int64(6), object(10)\n",
      "memory usage: 5.6+ MB\n"
     ]
    }
   ],
   "source": [
    "# total data 정보 학인\n",
    "\n",
    "data_2006_2021.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data 중간에 2년 주기로 순위 열에 합계란 제거\n",
    "\n",
    "data_2006_2021.set_index('순위', inplace=True) \n",
    "data_2006_2021 = data_2006_2021.drop(['합계'])\n",
    "data_2006_2021 = data_2006_2021.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 38407 entries, 0 to 38406\n",
      "Data columns (total 18 columns):\n",
      "순위        38407 non-null int64\n",
      "영화명       38402 non-null object\n",
      "개봉일       22778 non-null datetime64[ns]\n",
      "매출액       38407 non-null int64\n",
      "매출액점유율    38407 non-null float64\n",
      "누적매출액     38407 non-null int64\n",
      "관객수       38407 non-null int64\n",
      "누적관객수     38407 non-null int64\n",
      "스크린수      38407 non-null int64\n",
      "상영횟수      38407 non-null int64\n",
      "대표국적      37761 non-null object\n",
      "국적        37740 non-null object\n",
      "제작사       9627 non-null object\n",
      "배급사       20518 non-null object\n",
      "등급        24195 non-null object\n",
      "장르        36767 non-null object\n",
      "감독        31248 non-null object\n",
      "배우        23060 non-null object\n",
      "dtypes: datetime64[ns](1), float64(1), int64(7), object(9)\n",
      "memory usage: 5.3+ MB\n"
     ]
    }
   ],
   "source": [
    "data_2006_2021.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>순위</th>\n",
       "      <th>영화명</th>\n",
       "      <th>개봉일</th>\n",
       "      <th>매출액</th>\n",
       "      <th>매출액점유율</th>\n",
       "      <th>누적매출액</th>\n",
       "      <th>관객수</th>\n",
       "      <th>누적관객수</th>\n",
       "      <th>스크린수</th>\n",
       "      <th>상영횟수</th>\n",
       "      <th>대표국적</th>\n",
       "      <th>국적</th>\n",
       "      <th>제작사</th>\n",
       "      <th>배급사</th>\n",
       "      <th>등급</th>\n",
       "      <th>장르</th>\n",
       "      <th>감독</th>\n",
       "      <th>배우</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>괴물</td>\n",
       "      <td>2006-07-27</td>\n",
       "      <td>66715881300</td>\n",
       "      <td>0.036</td>\n",
       "      <td>66715881300</td>\n",
       "      <td>10917195</td>\n",
       "      <td>10917195</td>\n",
       "      <td>647</td>\n",
       "      <td>113093</td>\n",
       "      <td>한국</td>\n",
       "      <td>한국</td>\n",
       "      <td>영화사청어람(주)</td>\n",
       "      <td>(주)쇼박스</td>\n",
       "      <td>12세관람가</td>\n",
       "      <td>SF,가족,드라마</td>\n",
       "      <td>봉준호</td>\n",
       "      <td>송강호,변희봉,박해일,배두나,고아성,오달수,박노식,라미란,고수희,윤제문,김뢰하,고창...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>왕의 남자</td>\n",
       "      <td>2005-12-29</td>\n",
       "      <td>61605851900</td>\n",
       "      <td>0.033</td>\n",
       "      <td>66015355400</td>\n",
       "      <td>9793917</td>\n",
       "      <td>10513699</td>\n",
       "      <td>313</td>\n",
       "      <td>106181</td>\n",
       "      <td>한국</td>\n",
       "      <td>한국</td>\n",
       "      <td>(주)씨네월드,(주)이글픽쳐스</td>\n",
       "      <td>(주)시네마서비스</td>\n",
       "      <td>15세이상관람가</td>\n",
       "      <td>드라마</td>\n",
       "      <td>이준익</td>\n",
       "      <td>감우성,이준기,유해진,정진영,박영수,강성연,이건우,이동수,이동헌,유효정,윤준식,박성...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>디워</td>\n",
       "      <td>2007-08-01</td>\n",
       "      <td>49339934700</td>\n",
       "      <td>0.027</td>\n",
       "      <td>49339934700</td>\n",
       "      <td>7855441</td>\n",
       "      <td>7855441</td>\n",
       "      <td>622</td>\n",
       "      <td>96434</td>\n",
       "      <td>한국</td>\n",
       "      <td>한국</td>\n",
       "      <td>㈜영구아트</td>\n",
       "      <td>(주)쇼박스</td>\n",
       "      <td>12세이상관람가</td>\n",
       "      <td>액션,판타지</td>\n",
       "      <td>심형래</td>\n",
       "      <td>브룩스 아만다,베어 제이슨</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>트랜스포머</td>\n",
       "      <td>2007-06-28</td>\n",
       "      <td>47619379338</td>\n",
       "      <td>0.026</td>\n",
       "      <td>47619379338</td>\n",
       "      <td>7389696</td>\n",
       "      <td>7389696</td>\n",
       "      <td>863</td>\n",
       "      <td>92291</td>\n",
       "      <td>미국</td>\n",
       "      <td>미국</td>\n",
       "      <td>드림웍스픽쳐스,드림웍스 SKG,파라마운트 픽쳐스</td>\n",
       "      <td>CJ ENM</td>\n",
       "      <td>12세이상관람가</td>\n",
       "      <td>SF,액션,어드벤처</td>\n",
       "      <td>마이클 베이</td>\n",
       "      <td>샤이아 라보프,메간 폭스</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>화려한 휴가</td>\n",
       "      <td>2007-07-25</td>\n",
       "      <td>44098449600</td>\n",
       "      <td>0.024</td>\n",
       "      <td>44098449600</td>\n",
       "      <td>6855300</td>\n",
       "      <td>6855300</td>\n",
       "      <td>551</td>\n",
       "      <td>96522</td>\n",
       "      <td>한국</td>\n",
       "      <td>한국</td>\n",
       "      <td>기획시대(주)</td>\n",
       "      <td>CJ ENM</td>\n",
       "      <td>12세이상관람가</td>\n",
       "      <td>드라마</td>\n",
       "      <td>김지훈</td>\n",
       "      <td>김상경,이창민,안성기,이요원,이준기,박철민,송진호,김명훈,신진철,황대원,김하림,조일...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   순위     영화명        개봉일          매출액  매출액점유율        누적매출액       관객수  \\\n",
       "0   1      괴물 2006-07-27  66715881300   0.036  66715881300  10917195   \n",
       "1   2   왕의 남자 2005-12-29  61605851900   0.033  66015355400   9793917   \n",
       "2   3      디워 2007-08-01  49339934700   0.027  49339934700   7855441   \n",
       "3   4   트랜스포머 2007-06-28  47619379338   0.026  47619379338   7389696   \n",
       "4   5  화려한 휴가 2007-07-25  44098449600   0.024  44098449600   6855300   \n",
       "\n",
       "      누적관객수  스크린수    상영횟수 대표국적  국적                         제작사        배급사  \\\n",
       "0  10917195   647  113093   한국  한국                   영화사청어람(주)     (주)쇼박스   \n",
       "1  10513699   313  106181   한국  한국            (주)씨네월드,(주)이글픽쳐스  (주)시네마서비스   \n",
       "2   7855441   622   96434   한국  한국                       ㈜영구아트     (주)쇼박스   \n",
       "3   7389696   863   92291   미국  미국  드림웍스픽쳐스,드림웍스 SKG,파라마운트 픽쳐스     CJ ENM   \n",
       "4   6855300   551   96522   한국  한국                     기획시대(주)     CJ ENM   \n",
       "\n",
       "         등급          장르      감독  \\\n",
       "0    12세관람가   SF,가족,드라마     봉준호   \n",
       "1  15세이상관람가         드라마     이준익   \n",
       "2  12세이상관람가      액션,판타지     심형래   \n",
       "3  12세이상관람가  SF,액션,어드벤처  마이클 베이   \n",
       "4  12세이상관람가         드라마     김지훈   \n",
       "\n",
       "                                                  배우  \n",
       "0  송강호,변희봉,박해일,배두나,고아성,오달수,박노식,라미란,고수희,윤제문,김뢰하,고창...  \n",
       "1  감우성,이준기,유해진,정진영,박영수,강성연,이건우,이동수,이동헌,유효정,윤준식,박성...  \n",
       "2                                     브룩스 아만다,베어 제이슨  \n",
       "3                                      샤이아 라보프,메간 폭스  \n",
       "4  김상경,이창민,안성기,이요원,이준기,박철민,송진호,김명훈,신진철,황대원,김하림,조일...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2006_2021.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 누적 관객수 1만명 이하인 영화 제거\n",
    "\n",
    "index_drop = data_2006_2021[data_2006_2021['누적관객수'] <= 10000].index\n",
    "data_2006_2021 = data_2006_2021.drop(index_drop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 6793 entries, 0 to 38375\n",
      "Data columns (total 18 columns):\n",
      "순위        6793 non-null int64\n",
      "영화명       6793 non-null object\n",
      "개봉일       6699 non-null datetime64[ns]\n",
      "매출액       6793 non-null int64\n",
      "매출액점유율    6793 non-null float64\n",
      "누적매출액     6793 non-null int64\n",
      "관객수       6793 non-null int64\n",
      "누적관객수     6793 non-null int64\n",
      "스크린수      6793 non-null int64\n",
      "상영횟수      6793 non-null int64\n",
      "대표국적      6779 non-null object\n",
      "국적        6779 non-null object\n",
      "제작사       3030 non-null object\n",
      "배급사       6599 non-null object\n",
      "등급        6704 non-null object\n",
      "장르        6775 non-null object\n",
      "감독        6736 non-null object\n",
      "배우        6473 non-null object\n",
      "dtypes: datetime64[ns](1), float64(1), int64(7), object(9)\n",
      "memory usage: 1008.3+ KB\n"
     ]
    }
   ],
   "source": [
    "data_2006_2021.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 중복된 영화를 제거하기 위해 누적 매출을 기준으로 내림차순\n",
    "\n",
    "data_2006_2021 = data_2006_2021.sort_values(by='누적매출액' ,ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 인덱스 리셋 후 중복된 영화 중 첫 번째 영화를 제외하고 모두 제거 \n",
    "\n",
    "data_2006_2021 = data_2006_2021.reset_index()\n",
    "data_2006_2021 = data_2006_2021.drop_duplicates(['영화명'], keep = 'first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "코리아                                1\n",
       "허스토리                               1\n",
       "비우티풀                               1\n",
       "어떤 시선                              1\n",
       "벤자민 버튼의 시간은 거꾸로 간다                 1\n",
       "스테이션 7                             1\n",
       "쎄시봉                                1\n",
       "용의자X                               1\n",
       "나의 사랑 나의 신부                        1\n",
       "프린스 코기                             1\n",
       "잘 살아보세                             1\n",
       "마릴린 먼로와 함께한 일주일                    1\n",
       "살인소설                               1\n",
       "뚝방전설                               1\n",
       "콜 미 바이 유어 네임                       1\n",
       "아티스트 봉만대                           1\n",
       "최악의 이웃과 사랑에 빠지는 방법                 1\n",
       "옹박: 더 레전드                          1\n",
       "강적                                 1\n",
       "꼬마 유령                              1\n",
       "비밀정보원: 인 더 프리즌                     1\n",
       "두 번째 스물                            1\n",
       "상류사회                               1\n",
       "스플릿                                1\n",
       "글러브                                1\n",
       "가필드-마법의 샘물                         1\n",
       "지상의 별처럼                            1\n",
       "타샤 튜더                              1\n",
       "하하하                                1\n",
       "그대 이름은 장미                          1\n",
       "                                  ..\n",
       "리틀 맨하탄                             1\n",
       "달빛궁궐                               1\n",
       "내가 잠들기 전에                          1\n",
       "마다가스카3 : 이번엔 서커스다!                 1\n",
       "워                                  1\n",
       "카3: 새로운 도전                         1\n",
       "중2병이라도 사랑이 하고 싶어! 극장판              1\n",
       "투혼                                 1\n",
       "치킨리틀                               1\n",
       "아워 이디엇 브라더                         1\n",
       "프리키 데스데이                           1\n",
       "토마스와 친구들: 그레이트 레이스                 1\n",
       "라라걸                                1\n",
       "야연                                 1\n",
       "하이큐!! 재능과 센스                       1\n",
       "살인의뢰                               1\n",
       "프롬 파리 위드 러브                        1\n",
       "분노의 질주: 더 세븐                       1\n",
       "슈퍼레이서 엔지                           1\n",
       "지구가 멈추는 날                          1\n",
       "파이터                                1\n",
       "킬러의 보디가드                           1\n",
       "극장판 짱구는 못말려: 아뵤! 쿵후 보이즈 ~라면 대란~    1\n",
       "로마의 휴일                             1\n",
       "사랑을 놓치다                            1\n",
       "빠삐용                                1\n",
       "서서평, 천천히 평온하게                      1\n",
       "싸움의 기술                             1\n",
       "80일간의 세계 일주                        1\n",
       "위플래쉬                               1\n",
       "Name: 영화명, Length: 4066, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2006_2021['영화명'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 인덱스 초기화 및 필요 없는 columns 제거\n",
    "\n",
    "data_2006_2021 = data_2006_2021.reset_index()\n",
    "\n",
    "del data_2006_2021['level_0']\n",
    "del data_2006_2021['index']\n",
    "del data_2006_2021['매출액']\n",
    "del data_2006_2021['매출액점유율']\n",
    "del data_2006_2021['관객수']\n",
    "del data_2006_2021['순위']\n",
    "del data_2006_2021['스크린수']\n",
    "del data_2006_2021['상영횟수']\n",
    "del data_2006_2021['대표국적']\n",
    "del data_2006_2021['국적']\n",
    "del data_2006_2021['제작사']\n",
    "# del data_2006_2021['배우']\n",
    "del data_2006_2021['감독']\n",
    "del data_2006_2021['등급']\n",
    "del data_2006_2021['배급사']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# '개봉일' 문자열로 변환 후 년도만 표기\n",
    "\n",
    "data_2006_2021['개봉일'] = data_2006_2021['개봉일'].apply(lambda x : str(x)[0:4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>영화명</th>\n",
       "      <th>개봉일</th>\n",
       "      <th>누적매출액</th>\n",
       "      <th>누적관객수</th>\n",
       "      <th>장르</th>\n",
       "      <th>배우</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1066</th>\n",
       "      <td>로보트 태권V(76년 디지털 복원판)</td>\n",
       "      <td>NaT</td>\n",
       "      <td>3617228000</td>\n",
       "      <td>656670</td>\n",
       "      <td>SF</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1462</th>\n",
       "      <td>오페라의 유령 : 25주년 특별 공연</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1872479000</td>\n",
       "      <td>105298</td>\n",
       "      <td>뮤지컬</td>\n",
       "      <td>라민 카림루,시에라 보게스</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1553</th>\n",
       "      <td>2005 [통합]패키지영화</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1623473500</td>\n",
       "      <td>234307</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1705</th>\n",
       "      <td>뽀로로 극장판 눈요정 마을 대모험</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1289929200</td>\n",
       "      <td>258909</td>\n",
       "      <td>애니메이션</td>\n",
       "      <td>이선,함수정,홍소영,이미자,정미숙,김환진</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>2006 [통합]영화제/기획전/회고전 등</td>\n",
       "      <td>NaT</td>\n",
       "      <td>581154200</td>\n",
       "      <td>106393</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2350</th>\n",
       "      <td>[통합]회고전, 기획전 등</td>\n",
       "      <td>NaT</td>\n",
       "      <td>501984300</td>\n",
       "      <td>104955</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2492</th>\n",
       "      <td>2005 [통합]영화제/기획전/회고전 등</td>\n",
       "      <td>NaT</td>\n",
       "      <td>412262500</td>\n",
       "      <td>75563</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2629</th>\n",
       "      <td>2007 [통합]영화제/기획전/회고전 등</td>\n",
       "      <td>NaT</td>\n",
       "      <td>353345600</td>\n",
       "      <td>60705</td>\n",
       "      <td>드라마,전쟁</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2728</th>\n",
       "      <td>[통합]영화패키지상영</td>\n",
       "      <td>NaT</td>\n",
       "      <td>308437000</td>\n",
       "      <td>35186</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2874</th>\n",
       "      <td>BIFAN2016 판타스틱 단편 걸작선 1</td>\n",
       "      <td>NaT</td>\n",
       "      <td>258603000</td>\n",
       "      <td>43003</td>\n",
       "      <td>기타</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3057</th>\n",
       "      <td>판타스틱 단편 걸작선 1</td>\n",
       "      <td>NaT</td>\n",
       "      <td>203412000</td>\n",
       "      <td>33902</td>\n",
       "      <td>기타</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3195</th>\n",
       "      <td>2006 [통합]패키지영화</td>\n",
       "      <td>NaT</td>\n",
       "      <td>172120000</td>\n",
       "      <td>18095</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3357</th>\n",
       "      <td>아가씨(확장판)</td>\n",
       "      <td>NaT</td>\n",
       "      <td>142124050</td>\n",
       "      <td>18224</td>\n",
       "      <td>스릴러,드라마</td>\n",
       "      <td>김민희,김태리,하정우,조진웅,김해숙,문소리,최병모,김인우,이용녀,조은형</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3432</th>\n",
       "      <td>거위도 난다</td>\n",
       "      <td>NaT</td>\n",
       "      <td>130428000</td>\n",
       "      <td>17797</td>\n",
       "      <td>드라마</td>\n",
       "      <td>김승열,황정영</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3522</th>\n",
       "      <td>BIFAN2020 판타스틱 단편 걸작선 1</td>\n",
       "      <td>NaT</td>\n",
       "      <td>120000000</td>\n",
       "      <td>20000</td>\n",
       "      <td>기타</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3601</th>\n",
       "      <td>2009 일본 인디필름 페스티벌</td>\n",
       "      <td>NaT</td>\n",
       "      <td>110068500</td>\n",
       "      <td>15627</td>\n",
       "      <td>기타</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3718</th>\n",
       "      <td>여성다큐멘터리스트-반이다1</td>\n",
       "      <td>NaT</td>\n",
       "      <td>97613500</td>\n",
       "      <td>13142</td>\n",
       "      <td>다큐멘터리</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3899</th>\n",
       "      <td>일본 인디필름 페스티벌</td>\n",
       "      <td>NaT</td>\n",
       "      <td>80769000</td>\n",
       "      <td>13481</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4010</th>\n",
       "      <td>애수</td>\n",
       "      <td>NaT</td>\n",
       "      <td>40812500</td>\n",
       "      <td>18359</td>\n",
       "      <td>드라마,전쟁,멜로/로맨스</td>\n",
       "      <td>비비안 리,로버트 테일러</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4016</th>\n",
       "      <td>지상에서 영원으로</td>\n",
       "      <td>NaT</td>\n",
       "      <td>35101000</td>\n",
       "      <td>16312</td>\n",
       "      <td>전쟁,드라마,멜로/로맨스</td>\n",
       "      <td>몽고메리 클리프트</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4017</th>\n",
       "      <td>허리우드극장-그곳엔 추억이 있다</td>\n",
       "      <td>NaT</td>\n",
       "      <td>35081000</td>\n",
       "      <td>16798</td>\n",
       "      <td>기타</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4018</th>\n",
       "      <td>사브리나</td>\n",
       "      <td>NaT</td>\n",
       "      <td>34893000</td>\n",
       "      <td>13573</td>\n",
       "      <td>코미디,멜로/로맨스</td>\n",
       "      <td>험프리 보가트,오드리 헵번,윌리엄 홀덴</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4020</th>\n",
       "      <td>마음의 행로</td>\n",
       "      <td>NaT</td>\n",
       "      <td>33481000</td>\n",
       "      <td>16658</td>\n",
       "      <td>드라마,멜로/로맨스</td>\n",
       "      <td>그리어 가슨</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4022</th>\n",
       "      <td>9월이 오면</td>\n",
       "      <td>NaT</td>\n",
       "      <td>30717000</td>\n",
       "      <td>15281</td>\n",
       "      <td>코미디,멜로/로맨스</td>\n",
       "      <td>록 허드슨,지나 롤로브리지다</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4029</th>\n",
       "      <td>해저 2만리</td>\n",
       "      <td>NaT</td>\n",
       "      <td>27615000</td>\n",
       "      <td>13354</td>\n",
       "      <td>SF,어드벤처,가족</td>\n",
       "      <td>커크 더글라스,제임스 메이슨</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4031</th>\n",
       "      <td>셰인</td>\n",
       "      <td>NaT</td>\n",
       "      <td>27324000</td>\n",
       "      <td>12927</td>\n",
       "      <td>드라마,서부극(웨스턴)</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4032</th>\n",
       "      <td>대지</td>\n",
       "      <td>NaT</td>\n",
       "      <td>26519000</td>\n",
       "      <td>12635</td>\n",
       "      <td>드라마</td>\n",
       "      <td>폴 무니,루이스 라이너</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4036</th>\n",
       "      <td>황태자의 첫사랑</td>\n",
       "      <td>NaT</td>\n",
       "      <td>25543000</td>\n",
       "      <td>11811</td>\n",
       "      <td>드라마,뮤지컬</td>\n",
       "      <td>앤 블리스,에드몬드 퍼돔</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4038</th>\n",
       "      <td>세계를 그대 품안에</td>\n",
       "      <td>NaT</td>\n",
       "      <td>24705000</td>\n",
       "      <td>12215</td>\n",
       "      <td>액션,어드벤처</td>\n",
       "      <td>앤 블리스,그레고리 펙</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4042</th>\n",
       "      <td>007 살인번호</td>\n",
       "      <td>NaT</td>\n",
       "      <td>23398000</td>\n",
       "      <td>11705</td>\n",
       "      <td>액션,어드벤처</td>\n",
       "      <td>숀 코네리,우슬라 안드레스,버나드 리</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4045</th>\n",
       "      <td>어페어 투 리멤버</td>\n",
       "      <td>NaT</td>\n",
       "      <td>22779000</td>\n",
       "      <td>11164</td>\n",
       "      <td>드라마,멜로/로맨스</td>\n",
       "      <td>캐리 그랜트,데보라 카,리차드 데닝</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4046</th>\n",
       "      <td>사랑할 때와 죽을 때</td>\n",
       "      <td>NaT</td>\n",
       "      <td>22774000</td>\n",
       "      <td>11070</td>\n",
       "      <td>드라마,멜로/로맨스,전쟁</td>\n",
       "      <td>존 개빈,리셀로테 풀베르</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4047</th>\n",
       "      <td>바이킹</td>\n",
       "      <td>NaT</td>\n",
       "      <td>22484500</td>\n",
       "      <td>11104</td>\n",
       "      <td>기타</td>\n",
       "      <td>어네스트 보그나인,토니 커티스,커크 더글라스</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4049</th>\n",
       "      <td>하이 눈</td>\n",
       "      <td>NaT</td>\n",
       "      <td>22168500</td>\n",
       "      <td>10395</td>\n",
       "      <td>서부극(웨스턴),스릴러</td>\n",
       "      <td>게리 쿠퍼,토마스 미첼,그레이스 켈리</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4051</th>\n",
       "      <td>OK 목장의 결투</td>\n",
       "      <td>NaT</td>\n",
       "      <td>21762000</td>\n",
       "      <td>10419</td>\n",
       "      <td>스릴러,액션</td>\n",
       "      <td>버트 랭커스터,커크 더글라스,론다 플레밍</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4052</th>\n",
       "      <td>왕중왕</td>\n",
       "      <td>NaT</td>\n",
       "      <td>21754500</td>\n",
       "      <td>10703</td>\n",
       "      <td>드라마</td>\n",
       "      <td>제프리 헌터,시오반 맥켄나</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4056</th>\n",
       "      <td>모감보</td>\n",
       "      <td>NaT</td>\n",
       "      <td>21053000</td>\n",
       "      <td>10100</td>\n",
       "      <td>드라마,어드벤처</td>\n",
       "      <td>그레이스 켈리,클라크 게이블,에바 가드너</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4057</th>\n",
       "      <td>알렉산더대왕</td>\n",
       "      <td>NaT</td>\n",
       "      <td>20880000</td>\n",
       "      <td>10114</td>\n",
       "      <td>전쟁,사극</td>\n",
       "      <td>리차드 버튼,프레드릭 마치,클레어 블룸</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4061</th>\n",
       "      <td>사요나라</td>\n",
       "      <td>NaT</td>\n",
       "      <td>20377000</td>\n",
       "      <td>10135</td>\n",
       "      <td>드라마,멜로/로맨스</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4062</th>\n",
       "      <td>마부</td>\n",
       "      <td>NaT</td>\n",
       "      <td>20303000</td>\n",
       "      <td>10724</td>\n",
       "      <td>드라마</td>\n",
       "      <td>김승호,신영균,황정순</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          영화명  개봉일       누적매출액   누적관객수             장르  \\\n",
       "1066     로보트 태권V(76년 디지털 복원판)  NaT  3617228000  656670             SF   \n",
       "1462     오페라의 유령 : 25주년 특별 공연  NaT  1872479000  105298            뮤지컬   \n",
       "1553           2005 [통합]패키지영화  NaT  1623473500  234307            NaN   \n",
       "1705       뽀로로 극장판 눈요정 마을 대모험  NaT  1289929200  258909          애니메이션   \n",
       "2253   2006 [통합]영화제/기획전/회고전 등  NaT   581154200  106393            NaN   \n",
       "2350           [통합]회고전, 기획전 등  NaT   501984300  104955            NaN   \n",
       "2492   2005 [통합]영화제/기획전/회고전 등  NaT   412262500   75563            NaN   \n",
       "2629   2007 [통합]영화제/기획전/회고전 등  NaT   353345600   60705         드라마,전쟁   \n",
       "2728              [통합]영화패키지상영  NaT   308437000   35186            NaN   \n",
       "2874  BIFAN2016 판타스틱 단편 걸작선 1  NaT   258603000   43003             기타   \n",
       "3057            판타스틱 단편 걸작선 1  NaT   203412000   33902             기타   \n",
       "3195           2006 [통합]패키지영화  NaT   172120000   18095            NaN   \n",
       "3357                 아가씨(확장판)  NaT   142124050   18224        스릴러,드라마   \n",
       "3432                   거위도 난다  NaT   130428000   17797            드라마   \n",
       "3522  BIFAN2020 판타스틱 단편 걸작선 1  NaT   120000000   20000             기타   \n",
       "3601        2009 일본 인디필름 페스티벌  NaT   110068500   15627             기타   \n",
       "3718           여성다큐멘터리스트-반이다1  NaT    97613500   13142          다큐멘터리   \n",
       "3899             일본 인디필름 페스티벌  NaT    80769000   13481            NaN   \n",
       "4010                       애수  NaT    40812500   18359  드라마,전쟁,멜로/로맨스   \n",
       "4016                지상에서 영원으로  NaT    35101000   16312  전쟁,드라마,멜로/로맨스   \n",
       "4017        허리우드극장-그곳엔 추억이 있다  NaT    35081000   16798             기타   \n",
       "4018                     사브리나  NaT    34893000   13573     코미디,멜로/로맨스   \n",
       "4020                   마음의 행로  NaT    33481000   16658     드라마,멜로/로맨스   \n",
       "4022                   9월이 오면  NaT    30717000   15281     코미디,멜로/로맨스   \n",
       "4029                   해저 2만리  NaT    27615000   13354     SF,어드벤처,가족   \n",
       "4031                       셰인  NaT    27324000   12927   드라마,서부극(웨스턴)   \n",
       "4032                       대지  NaT    26519000   12635            드라마   \n",
       "4036                 황태자의 첫사랑  NaT    25543000   11811        드라마,뮤지컬   \n",
       "4038               세계를 그대 품안에  NaT    24705000   12215        액션,어드벤처   \n",
       "4042                 007 살인번호  NaT    23398000   11705        액션,어드벤처   \n",
       "4045                어페어 투 리멤버  NaT    22779000   11164     드라마,멜로/로맨스   \n",
       "4046              사랑할 때와 죽을 때  NaT    22774000   11070  드라마,멜로/로맨스,전쟁   \n",
       "4047                      바이킹  NaT    22484500   11104             기타   \n",
       "4049                     하이 눈  NaT    22168500   10395   서부극(웨스턴),스릴러   \n",
       "4051                OK 목장의 결투  NaT    21762000   10419         스릴러,액션   \n",
       "4052                      왕중왕  NaT    21754500   10703            드라마   \n",
       "4056                      모감보  NaT    21053000   10100       드라마,어드벤처   \n",
       "4057                   알렉산더대왕  NaT    20880000   10114          전쟁,사극   \n",
       "4061                     사요나라  NaT    20377000   10135     드라마,멜로/로맨스   \n",
       "4062                       마부  NaT    20303000   10724            드라마   \n",
       "\n",
       "                                           배우  \n",
       "1066                                      NaN  \n",
       "1462                           라민 카림루,시에라 보게스  \n",
       "1553                                      NaN  \n",
       "1705                   이선,함수정,홍소영,이미자,정미숙,김환진  \n",
       "2253                                      NaN  \n",
       "2350                                      NaN  \n",
       "2492                                      NaN  \n",
       "2629                                      NaN  \n",
       "2728                                      NaN  \n",
       "2874                                      NaN  \n",
       "3057                                      NaN  \n",
       "3195                                      NaN  \n",
       "3357  김민희,김태리,하정우,조진웅,김해숙,문소리,최병모,김인우,이용녀,조은형  \n",
       "3432                                  김승열,황정영  \n",
       "3522                                      NaN  \n",
       "3601                                      NaN  \n",
       "3718                                      NaN  \n",
       "3899                                      NaN  \n",
       "4010                            비비안 리,로버트 테일러  \n",
       "4016                                몽고메리 클리프트  \n",
       "4017                                      NaN  \n",
       "4018                    험프리 보가트,오드리 헵번,윌리엄 홀덴  \n",
       "4020                                   그리어 가슨  \n",
       "4022                          록 허드슨,지나 롤로브리지다  \n",
       "4029                          커크 더글라스,제임스 메이슨  \n",
       "4031                                      NaN  \n",
       "4032                             폴 무니,루이스 라이너  \n",
       "4036                            앤 블리스,에드몬드 퍼돔  \n",
       "4038                             앤 블리스,그레고리 펙  \n",
       "4042                     숀 코네리,우슬라 안드레스,버나드 리  \n",
       "4045                      캐리 그랜트,데보라 카,리차드 데닝  \n",
       "4046                            존 개빈,리셀로테 풀베르  \n",
       "4047                 어네스트 보그나인,토니 커티스,커크 더글라스  \n",
       "4049                     게리 쿠퍼,토마스 미첼,그레이스 켈리  \n",
       "4051                   버트 랭커스터,커크 더글라스,론다 플레밍  \n",
       "4052                           제프리 헌터,시오반 맥켄나  \n",
       "4056                   그레이스 켈리,클라크 게이블,에바 가드너  \n",
       "4057                    리차드 버튼,프레드릭 마치,클레어 블룸  \n",
       "4061                                      NaN  \n",
       "4062                              김승호,신영균,황정순  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# '개봉일' NaT값 확인\n",
    "\n",
    "data_2006_2021[data_2006_2021['개봉일'] == 'NaT']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# '개봉일' value 가 NaT인 값 제거\n",
    "\n",
    "index_drop = data_2006_2021[data_2006_2021['개봉일'] == 'NaT'].index\n",
    "data_2006_2021 = data_2006_2021.drop(index_drop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>영화명</th>\n",
       "      <th>개봉일</th>\n",
       "      <th>누적매출액</th>\n",
       "      <th>누적관객수</th>\n",
       "      <th>장르</th>\n",
       "      <th>배우</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [영화명, 개봉일, 누적매출액, 누적관객수, 장르, 배우]\n",
       "Index: []"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2006_2021[data_2006_2021['개봉일'] == 'NaT']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 배우의 결측 값이 대부분 애니메이션 이므로 배우 피처에 animation으로 채움\n",
    "\n",
    "data_2006_2021['배우'] = data_2006_2021['배우'].fillna('animation')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 결측 값 제거\n",
    "\n",
    "data_2006_2021 = data_2006_2021.dropna(how = 'any')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 인덱스 리셋 \n",
    "\n",
    "data_2006_2021 = data_2006_2021.reset_index()\n",
    "del data_2006_2021['index']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>영화명</th>\n",
       "      <th>개봉일</th>\n",
       "      <th>누적매출액</th>\n",
       "      <th>누적관객수</th>\n",
       "      <th>장르</th>\n",
       "      <th>배우</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>극한직업</td>\n",
       "      <td>2019</td>\n",
       "      <td>139655543516</td>\n",
       "      <td>16266338</td>\n",
       "      <td>코미디</td>\n",
       "      <td>류승룡,이하늬,진선규,이동휘,공명,양현민,장진희,한준우,김명준,나철,정재광,정원창,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>명량</td>\n",
       "      <td>2014</td>\n",
       "      <td>135757418810</td>\n",
       "      <td>17615686</td>\n",
       "      <td>사극,액션</td>\n",
       "      <td>최민식,류승룡,조진웅,김명곤,진구,이정현,권율,노민우,이승준,오타니 료헤이,박보검,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>아바타</td>\n",
       "      <td>2009</td>\n",
       "      <td>125304346000</td>\n",
       "      <td>13338863</td>\n",
       "      <td>SF,액션,어드벤처</td>\n",
       "      <td>샘 워싱턴,조 샐다나,시고니 위버</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>어벤져스: 엔드게임</td>\n",
       "      <td>2019</td>\n",
       "      <td>122492181020</td>\n",
       "      <td>13977602</td>\n",
       "      <td>액션,SF</td>\n",
       "      <td>로버트 다우니 주니어,크리스 에반스,마크 러팔로,크리스 헴스워스,스칼렛 요한슨,제레...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>신과함께-죄와 벌</td>\n",
       "      <td>2017</td>\n",
       "      <td>115727528087</td>\n",
       "      <td>14414658</td>\n",
       "      <td>판타지,드라마</td>\n",
       "      <td>하정우,차태현,주지훈,김향기,마동석,김동욱,도경수,오달수,임원희,장광,정해균,김수안...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          영화명   개봉일         누적매출액     누적관객수          장르  \\\n",
       "0        극한직업  2019  139655543516  16266338         코미디   \n",
       "1          명량  2014  135757418810  17615686       사극,액션   \n",
       "2         아바타  2009  125304346000  13338863  SF,액션,어드벤처   \n",
       "3  어벤져스: 엔드게임  2019  122492181020  13977602       액션,SF   \n",
       "4   신과함께-죄와 벌  2017  115727528087  14414658     판타지,드라마   \n",
       "\n",
       "                                                  배우  \n",
       "0  류승룡,이하늬,진선규,이동휘,공명,양현민,장진희,한준우,김명준,나철,정재광,정원창,...  \n",
       "1  최민식,류승룡,조진웅,김명곤,진구,이정현,권율,노민우,이승준,오타니 료헤이,박보검,...  \n",
       "2                                 샘 워싱턴,조 샐다나,시고니 위버  \n",
       "3  로버트 다우니 주니어,크리스 에반스,마크 러팔로,크리스 헴스워스,스칼렛 요한슨,제레...  \n",
       "4  하정우,차태현,주지훈,김향기,마동석,김동욱,도경수,오달수,임원희,장광,정해균,김수안...  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2006_2021.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4026 entries, 0 to 4025\n",
      "Data columns (total 6 columns):\n",
      "영화명      4026 non-null object\n",
      "개봉일      4026 non-null object\n",
      "누적매출액    4026 non-null int64\n",
      "누적관객수    4026 non-null int64\n",
      "장르       4026 non-null object\n",
      "배우       4026 non-null object\n",
      "dtypes: int64(2), object(4)\n",
      "memory usage: 188.8+ KB\n"
     ]
    }
   ],
   "source": [
    "data_2006_2021.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 사용자 정보 샘플 생성 \n",
    "\n",
    "data1 = {'user_id' : ['1번', '2번', '3번'],\n",
    "       '시청한영화' : [['괴물', '명량','극한직업','돌연변이'], ['마녀', '타워'], ['남한산성', '명량', '암살']],\n",
    "       '선호장르' : [['코미디', '액션'], ['코미디', '액션', '드라마'], ['SF', '사극']],\n",
    "       '선호배우' : [['이하늬', '류승룡', '이광수'], ['김다미', '손예진', '고수','하정우'], ['황정민', '주지훈']]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data = pd.DataFrame(data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data = user_data.set_index('user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>시청한영화</th>\n",
       "      <th>선호장르</th>\n",
       "      <th>선호배우</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1번</th>\n",
       "      <td>[괴물, 명량, 극한직업, 돌연변이]</td>\n",
       "      <td>[코미디, 액션]</td>\n",
       "      <td>[이하늬, 류승룡, 이광수]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2번</th>\n",
       "      <td>[마녀, 타워]</td>\n",
       "      <td>[코미디, 액션, 드라마]</td>\n",
       "      <td>[김다미, 손예진, 고수, 하정우]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3번</th>\n",
       "      <td>[남한산성, 명량, 암살]</td>\n",
       "      <td>[SF, 사극]</td>\n",
       "      <td>[황정민, 주지훈]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        시청한영화            선호장르                 선호배우\n",
       "user_id                                                           \n",
       "1번       [괴물, 명량, 극한직업, 돌연변이]       [코미디, 액션]      [이하늬, 류승룡, 이광수]\n",
       "2번                   [마녀, 타워]  [코미디, 액션, 드라마]  [김다미, 손예진, 고수, 하정우]\n",
       "3번             [남한산성, 명량, 암살]        [SF, 사극]           [황정민, 주지훈]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def col_value_dict_1(col_1, col_2, dict_) : # 장르별 or 배우별 영화 목록 딕셔너리 생성\n",
    "\n",
    "    global genre_movie_dict\n",
    "    global actor_movie_dict\n",
    "\n",
    "    for index, row in data_2006_2021.iterrows():\n",
    "\n",
    "        V1_combination = row[col_1]     \n",
    "        V2_combination = row[col_2]   \n",
    "        V1 = V1_combination.split(',') \n",
    "        V2 = V2_combination            \n",
    "\n",
    "        for v in V1:\n",
    "\n",
    "            if v not in dict_ :\n",
    "            \n",
    "                dict_[v] = []\n",
    "\n",
    "\n",
    "        for i in range(len(V1)) :\n",
    "\n",
    "            if V2 not in dict_[V1[i]] :\n",
    "\n",
    "                dict_[V1[i]].append(V2)\n",
    "\n",
    "def col_value_dict_2 (col_1, col_2, col_3, dict_): # 장르별 배우별 영화목록 딕셔너리 생성\n",
    "    \n",
    "    global genre_actor_movie_dict\n",
    "\n",
    "    for index, row in data_2006_2021.iterrows():\n",
    "\n",
    "        V1_combination = row[col_1]\n",
    "        V2_combination = row[col_2]\n",
    "        V3_combination = row[col_3]\n",
    "        V1 = V1_combination.split(',')  # p c m\n",
    "        V2 = V2_combination.split(',')\n",
    "        V3 = V3_combination\n",
    "\n",
    "        for genre in V1:\n",
    "\n",
    "            if genre not in genre_actor_movie_dict :\n",
    "\n",
    "                dict_[genre] = {}\n",
    "\n",
    "\n",
    "        for actor in V2 :\n",
    "\n",
    "            for i in range(len(V1)) :\n",
    "\n",
    "                if actor not in dict_[V1[i]] :\n",
    "\n",
    "                    dict_[V1[i]][actor]=[]\n",
    "\n",
    "\n",
    "                if V3 not in dict_[V1[i]][actor] :\n",
    "\n",
    "                    dict_[V1[i]][actor].append(V3)\n",
    "\n",
    "\n",
    "def data_check() : # 장르 또는 배우 입력 구별\n",
    "    \n",
    "    global input_info\n",
    "    global k\n",
    "    \n",
    "    input_info = input('\\nesc! 입력시 종료\\n장르 또는 배우를 입력해 주세요 : ')\n",
    "    \n",
    "    \n",
    "    data = data_2006_2021\n",
    "    data_actor_list = data_2006_2021['배우'].apply(lambda x : x.split(',') )\n",
    "    data_genre_list = data_2006_2021['장르'].apply(lambda x : x.split(',') )\n",
    "    \n",
    "    for i in range(len(data.index)) :\n",
    "        \n",
    "        if input_info in data_genre_list[i] :\n",
    "            \n",
    "            k = 1\n",
    "            \n",
    "            return input_info\n",
    "        \n",
    "        elif input_info in data_actor_list[i] :\n",
    "            \n",
    "            \n",
    "            k = 2\n",
    "            \n",
    "            return input_info\n",
    "        \n",
    "        \n",
    "    if input_info == 'esc!' :\n",
    "        return \n",
    "        \n",
    "    print('\\n다시 입력해 주세요')    \n",
    "    return data_check()\n",
    "   \n",
    "\n",
    "\n",
    "def user_id_check() :   # 입력 한 유저 ID가 사용자 정보 데이터에 있는지 확인\n",
    "    \n",
    "    global input_user_id\n",
    "    global input_user\n",
    "    \n",
    "    input_user_id = input('\\nesc! 입력시 종료\\nID를 입력해 주세요 : ')\n",
    "    \n",
    "    if input_user_id in user_data.index :\n",
    "        \n",
    "        return input_user_id\n",
    "    \n",
    "    elif input_user_id == 'esc!' :\n",
    "        \n",
    "        input_user = 'esc!'\n",
    "            \n",
    "            \n",
    "    else : \n",
    "        print('\\nID를 다시 입력해 주세요.')\n",
    "        \n",
    "        return user_id_check()\n",
    "\n",
    "\n",
    "def user_like_movie_append() :  # 사용자 데이터에서 선호 장르와 선호 배우 정보를 받음\n",
    "    \n",
    "    global movie_name \n",
    "    \n",
    "    for genre in user_data['선호장르'][input_user_id] :\n",
    "\n",
    "        for actor in user_data['선호배우'][input_user_id] :\n",
    "\n",
    "            try:\n",
    "\n",
    "                movie_name_1 = genre_actor_movie_dict[genre][actor]\n",
    "\n",
    "\n",
    "                for i in range(len(movie_name_1)) :\n",
    "\n",
    "\n",
    "                    movie_name.append(movie_name_1[i])\n",
    "\n",
    "            except:\n",
    "                pass\n",
    "                                   \n",
    "                \n",
    "def watched_movie_remove() : # 사용자 데이터를 토대로 출력 된 영화중 사용자가 시청한 영화 제거 \n",
    "    \n",
    "    global movie_name\n",
    "    \n",
    "    for j in user_data['시청한영화'][input_user_id] :\n",
    "        \n",
    "        if j in movie_name :\n",
    "            \n",
    "            movie_name.remove(j)\n",
    "\n",
    "              \n",
    "                            \n",
    "def col_movie(col_1, col_2, input_col_1, input_col_2, movie_dict ) : # 장르별 배우별 영화 출력\n",
    "    \n",
    "    \n",
    "    \n",
    "    if input_info != '애니메이션':\n",
    "        print('\\n{} : {} '.format(col_1,input_info))\n",
    "        print(movie_dict[input_info])\n",
    "        \n",
    "        input_col = input('\\n{}를 입력해 주세요 : '.format(col_2))\n",
    "        \n",
    "        data = data_2006_2021\n",
    "        data_actor_list = data_2006_2021['배우'].apply(lambda x : x.split(',') )\n",
    "        data_genre_list = data_2006_2021['장르'].apply(lambda x : x.split(',') )\n",
    "    \n",
    "        for i in range(len(data.index)) :\n",
    "\n",
    "            if input_info in data_genre_list[i] :\n",
    "\n",
    "                input_col_2 = input_col\n",
    "\n",
    "\n",
    "            elif input_info in data_actor_list[i] :\n",
    "\n",
    "                input_col_1 = input_col \n",
    "        \n",
    "        \n",
    "        try :\n",
    "            print('\\n장르 : {} , 배우 : {}' .format(input_col_1, input_col_2))\n",
    "            print(genre_actor_movie_dict[input_col_1][input_col_2])\n",
    "        \n",
    "        except :\n",
    "            print('\\n')\n",
    "            print('-'*40)\n",
    "            print('다시 입력해 주세요')\n",
    "            print('-'*40)\n",
    "            \n",
    "    else :\n",
    "        \n",
    "        print('\\n장르 : {} '.format(input_info))\n",
    "        print(genre_movie_dict[input_info])\n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "esc! 입력시 종료\n",
      "1. 사용자 추천 -- 2. 직접선택 : 1\n",
      "\n",
      "esc! 입력시 종료\n",
      "ID를 입력해 주세요 : 1번\n",
      "\n",
      "사용자 선호하는 장르 : ['코미디', '액션'] 사용자 선호하는 배우 : ['이하늬', '류승룡', '이광수']\n",
      "\n",
      "['조작된 도시', '평양성', '다이노소어 어드벤처 3D', '부라더', '나는 왕이로소이다', '염력', '퀴즈왕', '최종병기 활 감독확장판', '리오 2', '7번방의 선물', '최종병기 활', '간기남', '내 아내의 모든 것', '탐정: 리턴즈', '히트', '표적', '덕수리 5형제', '나의 특별한 형제']\n",
      "\n",
      "esc! 입력시 종료\n",
      "1. 사용자 추천 -- 2. 직접선택 : 1\n",
      "\n",
      "esc! 입력시 종료\n",
      "ID를 입력해 주세요 : 2번\n",
      "\n",
      "사용자 선호하는 장르 : ['코미디', '액션', '드라마'] 사용자 선호하는 배우 : ['김다미', '손예진', '고수', '하정우']\n",
      "\n",
      "['덕혜옹주', '우리 생애 최고의 순간', '무방비도시', '국가대표 완결판-못 다한 이야기', '초능력자', '두 번째 사랑', '상의원', '남한산성', '보트', 'PMC: 더 벙커', '잠복근무', '군도: 민란의 시대', '허삼관', '집으로 가는 길', '멋진 하루', '클로젯', '아가씨', '신과함께-죄와 벌', '백두산', '황해', '러브픽션', '작업의 정석', 1987, '577 프로젝트', '범죄와의 전쟁: 나쁜놈들 전성시대', '터널', '고지전', '아내가 결혼했다', '암살', '시간', '비스티 보이즈', '잘 알지도 못하면서', '신과함께-인과 연', '용서받지 못한 자', '국가대표', '공범', '베를린', '나쁜놈은 죽는다', '구미호 가족', '추격자', '평행이론', '오싹한 연애']\n",
      "\n",
      "esc! 입력시 종료\n",
      "1. 사용자 추천 -- 2. 직접선택 : 2\n",
      "\n",
      "esc! 입력시 종료\n",
      "장르 또는 배우를 입력해 주세요 : 류승룡\n",
      "\n",
      "배우 : 류승룡 \n",
      "['극한직업', '명량', '7번방의 선물', '광해, 왕이 된 남자', '최종병기 활', '내 아내의 모든 것', '표적', '고지전', '아이들...', '평양성', '가디언즈', '베스트셀러', '시크릿', '황진이', '염력', '손님', '리오 2', '퀴즈왕', '7년의 밤', '도리화가', '열한번째 엄마', '불신지옥', '서울역', '된장', '지구대표 롤링스타즈', '캡틴 하록', '최종병기 활 감독확장판']\n",
      "\n",
      "장르를 입력해 주세요 : 코미디\n",
      "\n",
      "장르 : 코미디 , 배우 : 류승룡\n",
      "['극한직업', '7번방의 선물', '내 아내의 모든 것', '평양성', '염력', '리오 2', '퀴즈왕']\n",
      "\n",
      "esc! 입력시 종료\n",
      "1. 사용자 추천 -- 2. 직접선택 : 2\n",
      "\n",
      "esc! 입력시 종료\n",
      "장르 또는 배우를 입력해 주세요 : 코미디\n",
      "\n",
      "장르 : 코미디 \n",
      "['극한직업', '7번방의 선물', '겨울왕국', '엑시트', '검사외전', '스파이더맨: 파 프롬 홈', '국가대표', '럭키', '써니', '과속스캔들', '은밀하게 위대하게', '완벽한 타인', '쿵푸팬더 2', '전우치', '킹스맨: 골든 서클', '인사이드 아웃', '미녀는 괴로워', '조선명탐정 : 각시투구꽃의 비밀', '바람과 함께 사라지다', '내 아내의 모든 것', '데드풀 2', '투사부일체', '조선명탐정 : 사라진 놉의 딸', '댄싱퀸', '쿵푸 팬더', '캐리비안의 해적: 세상의 끝에서', '토이 스토리 4', '인턴', '박수건달', '그것만이 내 세상', '드래곤 길들이기', '맨 인 블랙 3', '탐정: 리턴즈', '7급 공무원', '아이 캔 스피크', '어바웃 타임', '캐리비안의 해적: 죽은 자는 말이 없다', '인크레더블 2', '박물관이 살아있다!', '캐리비안의 해적 : 망자의 함', '스물', '형', '퀵', '슈렉 포에버', '방자전', '헬로우 고스트', '오싹한 연애', '빅 히어로', '레드: 더 레전드', '보안관', '도리를 찾아서', '히트맨', '탐정 : 더 비기닝', '시라노; 연애조작단', '조선명탐정: 흡혈괴마의 비밀', '마이펫의 이중생활', '위험한 상견례', '보스 베이비', '굿모닝 프레지던트', '라스트 갓파더', '슈렉3', '핸콕', '가문의 영광4 - 가문의 수난', '장화신은 고양이', '굿바이 싱글', '나잇&데이', '나의 사랑 나의 신부', '걸리버 여행기', '내안의 그놈', '가문의 부활 - 가문의 영광3', '쩨쩨한 로맨스', '1번가의 기적', '음란서생', '오늘의 연애', '토이 스토리 3', '킬러의 보디가드', '바르게 살자', '나의 PS 파트너', '주먹왕 랄프 2: 인터넷 속으로', '연애의 온도', '애자', '쎄시봉', '색즉시공 시즌2', '러브픽션', '정직한 후보', '광식이 동생 광태', '언터처블: 1%의 우정', '평양성', '임금님의 사건수첩', '마다가스카3 : 이번엔 서커스다!', '차우', '마다가스카의 펭귄', '박물관이 살아있다 2', '아이스 에이지 4: 대륙 이동설', '맨발의 기봉이', '나의 특별한 형제', '부라더', '작업의 정석', '피끓는 청춘', '오케이 마담', '바람피기 좋은 날', '궁합', '유감스러운 도시', '해치지않아', '라푼젤', '원스어폰어타임', '구세주', '런닝맨', '권순분여사 납치사건', '청춘만화', '바람 바람 바람', '굿 다이노', '차형사', '흡혈형사 나도열', '청담보살', '잠복근무', '간기남', '미스터 고', '간첩', '예스맨', '오션스 써틴', '복면달호', '슬로우 비디오', '조폭마누라3', '마다가스카', '육혈포 강도단', '결혼전야', '야수와 미녀', '마파도2', '가문의 영광5 - 가문의 귀환', '월ㆍE', '간 큰 가족', '고령화 가족', '박물관이 살아있다 : 비밀의 무덤', '수상한 고객들', '몬스터 호텔 3', '만남의 광장', '못말리는 결혼', '이장과 군수', '업', '염력', '미쓰 와이프', '꿀벌대소동', '로맨틱 홀리데이', '싸움의 기술', '우리는 형제입니다', '섹스 앤 더 시티', '파퍼씨네 펭귄들', '방가? 방가!', '월터의 상상은 현실이 된다', '최강로맨스', '이프 온리', '점쟁이들', '전국노래자랑', '브리짓 존스의 베이비', '디스 민즈 워', '좋아해줘', '몬스터 하우스', '크루즈 패밀리', '레슬러', '디스트릭트 9', '체포왕', '그는 당신에게 반하지 않았다', '라따뚜이', '레드슈즈', '개구쟁이 스머프 2', '남쪽으로 튀어', '관능의 법칙', '상사부일체', '빨간모자의 진실', '리오 2', '김관장 대 김관장 대 김관장', '나는 왕이로소이다', '하늘에서 음식이 내린다면 2', '주유소 습격사건 2', '오션스 트웰브', '미스터 주: 사라진 VIP', '아빠는 딸', '헷지', '내 깡패 같은 애인', '리오', '볼트', '러시 아워 3', '예의없는 것들', '방과후 옥상', '올드미스다이어리', '김씨표류기', '순정만화', '라스베가스에서만 생길 수 있는 일', '두 얼굴의 여친', '몬스터 vs 에이리언', '국제수사', '미쓰GO', '패션왕', '반가운 살인자', '레터스 투 줄리엣', '이층의 악당', '님스 아일랜드', '홍길동의 후예', '퀴즈왕', '그린치', '울학교 이티', '다찌마와리', '러브 & 드럭스', '헬머니', '고스트버스터즈', '앨빈과 슈퍼밴드2', '아이스 에이지: 지구 대충돌', '미션 파서블', '파파', 'Mr.로빈 꼬시기', '여교수의 은밀한 매력', '페르디난드', '마고리엄의 장난감 백화점', '너는 펫', '앨빈과 슈퍼밴드3', '로봇(애니)', '용의주도 미스신', '원더풀 고스트', '이웃사촌', '앨빈과 슈퍼밴드', '스파이 지니어스', '카 2', '슈퍼맨이었던 사나이', '남자사용설명서', '미쓰 홍당무', '카3: 새로운 도전', '투 가이즈', '위험한 상견례 2', '불량남녀', '천하장사 마돈나', '아부의 왕', '조선미녀삼총사', '해피 피트', '캐치미', '백만장자의 첫사랑', '세 얼간이', '원피스 - 기계태엽성의 메카거병', '닌자터틀', '동갑내기 과외하기 레슨 2', '사랑방 선수와 어머니', '넛잡: 땅콩 도둑들', '카', '달콤한 거짓말', '내니 다이어리', '넛잡 2', '뻔뻔한 딕&제인', '섹스 앤 더 시티 2', '사랑이 무서워', '80일간의 세계 일주', '치킨리틀', '티끌모아 로맨스', '애정결핍이 두 남자에게 미치는 영향', '다세포소녀', '마법에 걸린 사랑', '미드나잇 인 파리', '오! 문희', '커플즈', '7호실', '사랑하기 때문에', '아기와 나', '국가대표 완결판-못 다한 이야기', '아담스 패밀리', '극적인 하룻밤', '패딩턴 2', '작은 영웅 데스페로', '사랑의 레시피', '스폰지밥 3D', '프로포즈', '위대한 소원', '어글리 트루스', '레드카펫', '킬러스', '원탁의 천사', '나를 차버린 스파이', '패딩턴', '러브 액츄얼리', '원스 어폰 어 타임... 인 할리우드', '정승필 실종사건', '구스범스', '러브, 로지', '음치 클리닉', '미나문방구', '비행기 2: 소방구조대', '싸움', '클릭', '월래스와 그로밋 : 거대토끼의 저주', '뚝방전설', '아이 필 프리티', '앨빈과 슈퍼밴드: 악동 어드벤처', '헨젤과 그레텔: 마녀 사냥꾼 3D', '다이노 타임', '네버엔딩 스토리', '친구와 연인사이', '잔혹한 출근', '쇼퍼홀릭', '누가 그녀와 잤을까?', '라스트 크리스마스', '19곰 테드', '우리는 동물원을 샀다', '버킷 리스트:죽기전에 꼭 하고싶은것들', 'CJ7:장강7호', '쏜다', '노미오와 줄리엣', '롤러코스터', '극장판 도라에몽:진구의 마계대모험 7인의 마법사', '스카우트', '1724 기방난동사건', '좋지 아니한가', '창문 넘어 도망친 100세 노인', '엘라의 모험 : 해피엔딩의 위기', '가루지기', '러브 & 트러블', '밤의 여왕', '사랑은 너무 복잡해', '연애의 맛', '샬롯의 거미줄', '마이 뉴 파트너', '부그와 엘리엇(애니)', '플러쉬', '알파 앤 오메가', '저스트 라이크 헤븐', '레고 무비', '웨딩 크래셔', '버드맨', '뉴욕은 언제나 사랑 중', '강철대오:구국의 철가방', '27번의 결혼리허설', '겁나는 여친의 완벽한 비밀', '덕수리 5형제', '스페이스 침스:우주선을 찾아서', '아이스 에이지 2', '새해전야', '굿모닝 에브리원', '걸스카우트', '나는 공무원이다', '세이빙 산타', '페스티발', '스누피: 더 피너츠 무비', '첫키스만 50번째', '에반 올마이티', '송 포 유', '두번할까요', '가필드', '해피 피트 2', '컬러풀 웨딩즈', '앤트 불리', '저스트 프렌드', '생, 날선생', '덤 앤 더머 투', '자칼이 온다', '브레이크 업 : 이별후애(愛)', '잘 살아보세', '말리와 나', '우리 집에 왜 왔니', '페넬로피', '라듸오 데이즈', '19곰 테드 2', '조이', '라스트베가스', '내니맥피 2: 유모와마법소동', '로마 위드 러브', '심슨가족, 더무비', '꼬마 니콜라', '크레이지 리치 아시안', '발렌타인 데이', '프라임 러브', '베드타임 스토리', '아메리칸 울트라', '내니맥피-우리 유모는 마법사', '철없는 그녀의 아찔한 연애코치', '아메리칸 셰프', '노바디', '마강호텔', '대배우', '아빠가 여자를 좋아해', '다운사이징', '인 굿 컴퍼니', '워킹걸', '죽어도 해피엔딩', '아빠를 빌려드립니다', '대한이, 민국씨', '빅', '좀비랜드: 더블 탭', '레고 배트맨 무비', '트롤: 월드 투어', '닌자거북이 TMNT', '나의 특별한 사랑이야기', '비정규직 특수요원', '겟 스마트', '레고 닌자고 무비', '댄 인 러브', '킥 애스: 영웅의 탄생', '찰리윌슨의 전쟁', '밀리언즈', '짱구는 못말려 극장판 : 정면승부! 로봇아빠의 역습', '로빈슨 크루소', '가필드 2', '50/50', '짱구는 못말려 극장판:태풍을 부르는 노래하는 엉덩이 폭탄', '로맨틱 아일랜드', '로마의 휴일', '케로로 더 무비:케로로 VS 케로로 천공대결전', '택시 4', '조조 래빗', '실버라이닝 플레이북', '공필두', '언니가 간다', '몬스터 주식회사', '구타유발자들', '아티스트', '소피의 연애 매뉴얼', '구미호 가족', '미스터 빈의 홀리데이', '스모킹 에이스', '들어는 봤니? 모건 부부', '로맨틱 크라운', '죽지않는 인간들의 밤', '프라이스리스', '인생은 아름다워', '맨 프롬 UNCLE', '레이디 버드', '게이트', '슈퍼히어로', '프로포즈 데이', '레이니 데이 인 뉴욕', '쓰리 빌보드', '베일리 어게인', '캣츠 앤 독스 2', '링스 어드벤처', '이웃집에 신이 산다', '터키', '히트', '걸프렌즈', '더 콘서트', '쉬즈 더 맨', '구세주 2', '니모를 찾아서', '돌연변이', '러브 앳', '신나는 동물농장(애니)', '5백만불의 사나이', '로빈슨 가족', '박스트롤', '마을금고 연쇄습격사건', 'R.I.P.D. : 알.아이.피.디.', '나의 산티아고', '그대 이름은 장미', '꿈은 이루어진다', 'S러버', '슈퍼 빼꼼: 스파이 대작전', '대병소장', '포커스', '써니 감독판', '577 프로젝트', '퍼펙트 웨딩(몬스터 인 로)', '눈물이 주룩주룩', '미운 오리 새끼의 모험', '셜록 놈즈', '완벽한 파트너', '신부들의 전쟁', '세인트 빈센트', '마이 캡틴 김대출', '지랄발광 17세', '하우 투 루즈 프렌즈', '아치와 씨팍', '프란시스 하', '피라냐 3DD', '숀더쉽', '필립모리스', '뉴욕 아이 러브 유', '구스 베이비', '오 마이 그랜파', '타워 하이스트', '모데카이', '쓰리 썸머 나잇', '러덜리스', '매직 인 더 문라이트', '원 챈스', '꽃미남 연쇄 테러 사건', '엽기적인 그녀 2', '아더 우먼', '프렌즈 위드 베네핏', '피치 퍼펙트: 언프리티 걸즈', '우리도 사랑일까', '가필드-마법의 샘물', '뜨거운녀석들', '스위치', '노다메 칸타빌레 Vol.1', '카페 벨에포크', '하이힐을 신고 달리는 여자', '노팅 힐', '아따맘마 - 극장판', '카리스마 탈출기', '미쓰 루시힐', '나의 로맨틱 가이드', '올레', '미트 페어런츠 3', '드림업', '화이트 칙스', '위아영', '블룸 형제 사기단', '마이 스파이', '내 친구의 사생활', '나의 첫 번째 슈퍼스타', '경주', '행오버 2', '트로픽 썬더', '내 여자친구의 결혼식', '황당한 외계인: 폴', '브라보 마이 라이프', '에브리바디 올라잇', '바운티 헌터', '프리키 데스데이', '개구리중사 케로로', '당신이 잠든 사이에', '결정적 한방', '동키호테', '주노', '듀 데이트', '피노키오: 당나귀 섬의 비밀', '우리, 사랑해도 되나요?', '프랭크', '달콤한 백수와 사랑만들기', '미스 페티그루의 어느 특별한 하루', '잡아야 산다', '수면의 과학', '디센던트', '인 디 에어', '사랑보다 황금', '스트레스를 부르는 그 이름 직장상사', '베스트 엑조틱 메리골드 호텔', '내 눈에 콩깍지', '스쿠프', '흑심모녀', '호프 스프링즈', '킬 미', '가필드 펫 포스 3D', '매기스 플랜', '사랑은 언제나 진행중', '두 번의 결혼식과 한 번의 장례식', '척 앤 래리', '족구왕', '프랑켄위니', '산타의 매직 크리스탈', '무도리', '목숨 건 연애', '내 연애의 기억', '피케이: 별에서 온 얼간이', '꼬마영웅 경찰차 프로디', '한 번 더 해피엔딩', '그래, 가족', '스윙걸즈', '범죄의 여왕', '나쁜 이웃들', '메기', '내가 죽기 전에 가장 듣고 싶은 말', '배반의 장미', '훌라걸스', '귀여워', '쿵푸 덩크', '웰컴, 삼바', '비밥바룰라', '스탠리의 도시락', '코블러', '스마트 피플', '문라이즈 킹덤', '뉴욕에서 온 남자, 파리에서 온 여자', '잘못된 만남', '비카인드 리와인드', '하트 브레이커', '개들의 섬', '플래닛 51', '나의 그리스식 웨딩 2', '백프로', '밴디다스', '스페이스 독', '당신이 그녀라면', '번 애프터 리딩', '헤일, 시저!', '부그와 엘리엇 2', '쟈니 잉글리쉬2 : 네버다이', '슈퍼윙스 3D', '위크엔드 인 파리', '구구는 고양이다', '루비 스팍스', '100일 동안 100가지로 100퍼센트 행복찾기', '몬스터 파크', '스파키', '처음 본 그녀에게 프로포즈하기', '시작은 키스!', '러브액츄얼리: 크리스마스 에디션', '슈퍼노바 지구 탈출기', '펀치레이디', '나를 미치게 하는 여자', '어디갔어, 버나뎃', '와인 미라클', '스쿨 오브 락', '리틀 러너', '빅 웨딩', '하이, 젝시', '굿모닝 맨하탄', '썬데이 서울', 'n번째 이별 중', '지골로 인 뉴욕', '마이 블랭키', '매직울프', '위핏', '북클럽', '꼬마 니콜라의 여름방학', '더 프롬', '환상의 그대', '애비규환', '왓 이프', '매직 마이크', '박물관이 진짜 살아있다', '판소리 복서', '결혼 이야기', '아워 이디엇 브라더', '카사노바', '카페 6', '원 포 더 머니', '오즈의 마법사: 요술구두와 말하는 책', '행운을 돌려줘!', '버터플라이', '타발루가와 얼음공주', '해리가 샐리를 만났을 때', '집 나온 남자들', '카메라를 멈추면 안 돼!', '세라비, 이것이 인생!', '부에노스 아이레스에서 사랑에 빠질 확률', '미스터 캣', '날나리 종부전', '로건 럭키', '타임 투 러브', '윌리', '낮술', '배저로와 친구들: 신비한 모험', '엘리제궁의 요리사', '무림여대생', '미스 리틀 선샤인', '돼지코 아기공룡 임피의 모험', '개들의 전쟁', '소림소녀', '펭이와 친구들의 남극대모험', '전차남', '핑크 팬더', '스즈미야 하루히의 소실', '해피 플라이트', '트립 투 이탈리아', '볼츠와 블립', '스킵트레이스: 합동수사', '판타스틱 Mr. 폭스', '빌리 진 킹: 세기의 대결', '시카고', '바그다드 카페 : 디렉터스컷', '이 멋진 세계에 축복을! 붉은 전설', 'MR. 후아유', '난 그녀와 키스했다', '혐오스런 마츠코의 일생', '슈퍼처방전', '폼포코 너구리 대작전', '콜링 인 러브', '킬러의 보디가드 무삭제 특별판', '은혼', '남주기 아까운 그녀', '대학살의 신', '커플 테라피: 대화가 필요해', '세상의 끝까지 21일', '애프터 러브', '사이드웨이', '트루먼 쇼', '내 이야기!!', '앤젤스 셰어: 천사를 위한 위스키', '세상의 모든 계절', '여배우는 오늘도', '픽시', '더 스퀘어', '웨딩스캔들', '꼬마영웅 바비', '#아이엠히어', '초(민망한)능력자들', '싸이보그 그녀', '무민 더 무비', '밀리언 웨이즈', '아스테릭스: 미션 올림픽 게임', '브로큰 플라워', '화성아이, 지구아빠', '프렌드 존', '레인', '헤이트 발렌타인데이', '워 위드 그랜파', '스페이스 치킨: 마법 부적의 비밀', '빽 투더 퓨쳐 2', '스페이스 독 2', '행복한 사전', '토니스토리2: 고철왕국의 친구들', '타이치0 3D', '토일렛', '8명의 여인들', '나쁜놈은 죽는다', '도쿄 마블 초콜릿', '고양이를 빌려드립니다', '알로, 슈티', '아노말리사', '매직 아워', '콜로설', '일 포스티노', '아메리칸 파이: 19금 동창회', '카센타', '내 남자의 유통기한', '텐텐', '피막', '북스마트', '포레스트 검프', '극장판 타오르지마 버스터-블랙어썰트의 귀환', '헤어드레서', '해피 홀리데이', '스턱 인 러브', '극장판 날아라! 호빵맨 : 바나나섬을 되찾아줘', '테이킹 우드스탁', '런던 프라이드', '세이빙 미스터 뱅크스', '빽 투 더 퓨쳐', '숀더쉽 더 무비: 꼬마 외계인 룰라!', '삼거리극장', '위험한 패밀리', '온리 유', '업 포 러브', '돈 존', '갬빗', '내겐 너무 사랑스러운 그녀', '알리바이 닷 컴', '아티스트 봉만대', '미스터 라잇', '킥 애스 2 : 겁없는 녀석들', '럼 다이어리', '트립 투 스페인', '쿵푸 요가', '콰르텟', '요시노 이발관', '피치 퍼펙트', '다즐링 주식회사', '오 루시!', '러브, 어게인', '비지터', '사랑은 타이핑 중!', '사랑이 이끄는 대로', '택시 5', '더 미드와이프', '최악의 이웃과 사랑에 빠지는 방법', '경축! 우리사랑', '사랑해, 매기', '서유기 리턴즈', '헬로우 마이 러브', '나의 판타스틱 데뷔작', '이웃집 스타', '러브 매니지먼트', '그들 각자의 영화관', '안경', '어바웃 레이', '내 남자의 순이', '춤추는 꿈틀이 밴드', '더 보이스', '우린 액션배우다', '량강도 아이들', '열두명의 웬수들2', '마이 쎄시 걸', '로봇 앤 프랭크', '미 앤 유 앤 에브리원', '하이 스쿨 뮤지컬: 졸업반', '도성풍운 3', '사랑도 흥정이 되나요?']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "배우를 입력해 주세요 : 류승룡\n",
      "\n",
      "장르 : 코미디 , 배우 : 류승룡\n",
      "['극한직업', '7번방의 선물', '내 아내의 모든 것', '평양성', '염력', '리오 2', '퀴즈왕']\n",
      "\n",
      "esc! 입력시 종료\n",
      "1. 사용자 추천 -- 2. 직접선택 : esc!\n",
      "\n",
      "프로그램을 종료합니다\n"
     ]
    }
   ],
   "source": [
    "# 프로그램 구동\n",
    "\n",
    "genre_movie_dict = {}\n",
    "actor_movie_dict = {}\n",
    "genre_actor_movie_dict = {}\n",
    "\n",
    "col_value_dict_1('장르', '영화명', genre_movie_dict)\n",
    "col_value_dict_1('배우', '영화명', actor_movie_dict)\n",
    "col_value_dict_2('장르', '배우', '영화명', genre_actor_movie_dict)   \n",
    "\n",
    "\n",
    "while True :\n",
    "    \n",
    "    input_user = input('\\nesc! 입력시 종료\\n1. 사용자 추천 -- 2. 직접선택 : ')\n",
    "    \n",
    "    \n",
    "    if input_user == '1' :\n",
    "        \n",
    "        movie_name = []\n",
    "        \n",
    "        input_user_id = ''\n",
    "        \n",
    "        user_id_check()\n",
    "        \n",
    "        \n",
    "        if input_user_id in user_data.index :\n",
    "            \n",
    "            user_like_movie_append()\n",
    "\n",
    "            movie_name = list(set(movie_name))\n",
    "            \n",
    "            watched_movie_remove()\n",
    "            \n",
    "            print('\\n사용자 선호하는 장르 : {} 사용자 선호하는 배우 : {}\\n'.format(user_data['선호장르'][input_user_id],\n",
    "                                                               user_data['선호배우'][input_user_id]))\n",
    "            print(movie_name)\n",
    "\n",
    "            movie_name = []\n",
    "        \n",
    "        \n",
    "    if input_user == 'esc!' :\n",
    "        \n",
    "        print('\\n프로그램을 종료합니다')\n",
    "        break\n",
    "        \n",
    "              \n",
    "    if input_user == '2' :\n",
    "        \n",
    "        k = 0\n",
    "        \n",
    "        input_info = data_check()       \n",
    "        \n",
    "\n",
    "        if k == 1 :\n",
    "\n",
    "            col_movie('장르', '배우', input_info, None,genre_movie_dict)\n",
    "\n",
    "\n",
    "        elif k == 2 :\n",
    "            \n",
    "             col_movie('배우', '장르', None, input_info, actor_movie_dict)\n",
    "            \n",
    "        if input_info == 'esc!' :\n",
    "            print('\\n프로그램을 종료합니다')\n",
    "            break\n",
    "            \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "opening_day_data = data_2006_2021['개봉일'].value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "opening_day = opening_day_data[-11:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2011    239\n",
       "2012    246\n",
       "2013    258\n",
       "2014    290\n",
       "2015    283\n",
       "2016    300\n",
       "2017    324\n",
       "2018    309\n",
       "2019    156\n",
       "2020    186\n",
       "2021     54\n",
       "Name: 개봉일, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opening_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = [12, 12 ]\n",
    "sns.barplot(opening_day.index, opening_day.values)\n",
    "plt.xlabel('Year', fontsize=20)\n",
    "plt.ylabel('Count of Movie', fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
